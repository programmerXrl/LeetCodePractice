# LeetCodePractice
import java.util.*;

public class Day01 {
    public static void main(String[] args) {
        int[] nums = {3,3};
        int target = 6;
        Day01 tool = new Day01();
        ListNode l1 = new ListNode(2);
        ListNode l2 = new ListNode(4);
        ListNode l3 = new ListNode(3);
        ListNode l4 = new ListNode(5);
        ListNode l5 = new ListNode(6);
        ListNode l6 = new ListNode(4);
        l1.next = l2;
        l2.next = l3;
        l4.next = l5;
        l5.next = l6;
        ListNode.printList(tool.addTwoNumbers(l1,l4));
    }


    public int lengthOfLongestSubstring(String s) {
        Set<Character> set = new HashSet<>();
        if (s.length() == 0){
            return 0;
        }
        int i = 0;
        int j = 0;
        int maxLen = 0;
        for(;i<s.length(); i++){
            if (!set.contains(s.charAt(i))){
                set.add(s.charAt(i));
                maxLen = Math.max(maxLen, set.size());
            }else {
                while (set.contains(s.charAt(i))){
                    set.remove(s.charAt(j));
                    j++;
                }
                set.add(s.charAt(i));
            }
        }
        return maxLen;
    }

    public int[] twoSum(int[] nums, int target) {
        Map<Integer,Integer> map = new HashMap<>();
        for(int i = 0; i < nums.length; i++){
            if (map.containsKey(target-nums[i])){
                return new int[]{map.get(target-nums[i]),i};
            }else {
                map.put(nums[i],i);
            }
        }
        return null;
    }

    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode head = null;
        ListNode tail = null;
        int carry = 0;
        while (l1!=null || l2!=null){
            int val1 = l1==null? 0: l1.val;
            int val2 = l2==null? 0: l2.val;
            int sum = val1 + val2 + carry;
            if (head==null){
                head = tail = new ListNode(sum % 10);
            }else {
                tail.next = new ListNode(sum % 10);
                tail = tail.next;
            }
            carry = sum / 10;
            if (l1!=null){
                l1 = l1.next;
            }
            if (l2!=null){
                l2 = l2.next;
            }
        }
        if (carry > 0){
            tail.next = new ListNode(carry);
        }
        return head;
    }
}
